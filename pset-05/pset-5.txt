=======================================================================
Jacob Rodriguez
COSC1420 910
PSET: 05
=======================================================================
PGM Source Code #1
-----------------------------------------------------------------------
#include <stdbool.h>
#include <stdio.h>

const float PKG_A_BASE_RATE = 15;
const unsigned short PKG_A_COVERED_HOURS = 50;
const float PKG_A_OVERAGE_RATE = 2.0;
const float PKG_B_BASE_RATE = 20;
const unsigned short PKG_B_COVERED_HOURS = 100;
const float PKG_B_OVERAGE_RATE = 1.5;
const float PKG_C_BASE_RATE = 25;
const unsigned short PKG_C_COVERED_HOURS = 150;
const float PKG_C_OVERAGE_RATE = 1.0;

char getPlan();
bool isPlanValid(const char plan);
bool areHoursValid(const unsigned short hours);
float calculatePkgA(unsigned short hours);
float calculatePkgB(unsigned short hours);
float calculatePkgC(unsigned short hours);
float calculatePackage(float baseRate, unsigned short coveredHours,
                       float overageRate, unsigned short hoursConsumed);
unsigned short getHours();

bool isPlanValid(const char plan)
{
  switch (plan)
  {
  case 'A':
    return 1;
  case 'B':
    return 1;
  case 'C':
    return 1;
  default:
    return 0;
  }
}
bool areHoursValid(const unsigned short hours)
{
  if (hours > 744)
  {
    return false;
  }
  else
  {
    return true;
  }
}
float calculatePkgA(unsigned short hours)
{

  float total = calculatePackage(PKG_A_BASE_RATE, PKG_A_COVERED_HOURS,
                                 PKG_A_OVERAGE_RATE, hours);
  return total;
}
float calculatePkgB(unsigned short hours)
{

  float total = calculatePackage(PKG_B_BASE_RATE, PKG_B_COVERED_HOURS,
                                 PKG_B_OVERAGE_RATE, hours);
  return total;
}
float calculatePkgC(short unsigned hours)
{
  float total = calculatePackage(PKG_C_BASE_RATE, PKG_C_COVERED_HOURS,
                                 PKG_C_OVERAGE_RATE, hours);
  return total;
}

float calculatePackage(float baseRate, unsigned short coveredHours,
                       float overageRate, unsigned short hoursConsumed)
{
  float total = baseRate;

  if (hoursConsumed > coveredHours)
  {
    unsigned short additionalHours = hoursConsumed - coveredHours;
    total += additionalHours * overageRate;
  }

  return total;
}

unsigned short getHours()
{
  unsigned short hours;

  printf("Enter the # of hours of access used: ");
  scanf("%hu", &hours);
  return hours;
}

char getPlan()
{
  char plan;

  printf("Choose your plan:");
  scanf("%c", &plan);
  return plan;
}

int main()
{
  char chosenPlan = getPlan();
  if (!isPlanValid(chosenPlan))
  {
    printf("Package %c is invalid. Exiting...", chosenPlan);
    return 0;
  }

  unsigned short hours = getHours();
  if (!areHoursValid(hours))
  {
    printf("Hours exceeds limit. Exiting...");
    return 0;
  }
  double planCost;

  switch (chosenPlan)
  {
  case 'A':
     planCost = calculatePkgA(hours);
    break;
  case 'B':
    planCost = calculatePkgB(hours);
    break;
  case 'C':
    planCost = calculatePkgC(hours);
    break;
  default:
    return 0;
  }

  printf("Under plan %c your cost is: $%.2lf\n", chosenPlan, planCost);

  return 0;
}

==============================================
PGM #1 Output
-----------------------------------------------------------------------

Choose your plan:A
Enter the # of hours of access used: 161
Under plan A your cost is: $237.00

Choose your plan:B
Enter the # of hours of access used: 135
Under plan B your cost is: $72.50

Choose your plan:L
Package L is invalid. Exiting...

=================================================
PGM Source Code #2
-----------------------------------------------------------------------
#include <math.h>
#include <stdbool.h>
#include <stdio.h>

float calculateBMI(const unsigned short wt_lb, const unsigned short ht_in) {
  return (703 * wt_lb) / pow(ht_in, 2);
}

const char *categorizeWeight(float BMI) {
  if (BMI < 18.5) {
    return "Underweight";
  } else if (BMI >= 18.5 && BMI < 25) {
    return "Normal";
  } else if (BMI >= 25.0 && BMI < 30) {
    return "Overweight";
  } else if (BMI >= 30.0) {
    return "Obese";
  } else {
    return "";
  }
}

int main() {
  unsigned short weigth_lb;
  unsigned short height_in;
  printf("Enter your weight(lbs):");
  scanf("%hu", &weigth_lb);
  printf("Enter your height(inch):");
  scanf(" %hu", &height_in);

  float BMI = calculateBMI(weigth_lb, height_in);
  const char *category = categorizeWeight(BMI);

  printf("BMI: %f\n", BMI);
  printf("Category: %s\n", category);

  return 0;
}

==============================================
PGM #2 Output
-----------------------------------------------------------------------

Enter your weight(lbs):175 
Enter your height(inch):71
BMI: 24.404881
Category: Normal

==============================================
PGM Source Code #3
-----------------------------------------------------------------------
#include <stdbool.h>
#include <stdio.h>

const char *findQuadrant(float x_coord, float y_coord) {
  if (x_coord == 0 && y_coord == 0) {
    return "located on the origin";
  } else if (x_coord == 0) {
    return "located on the y-axis";
  } else if (y_coord == 0) {
    return "located on the x-axis";
  } else if (x_coord > 0) {
    if (y_coord > 0) {
      return "located in Quadrant I";
    } else if (y_coord < 0) {
      return "located in Quadrant IV";
    }
  } else if (x_coord < 0) {
    if (y_coord > 0) {
      return "located in Quadrant II";
    } else if (y_coord < 0) {
      return "located in Quadrant III";
    }
  }

  return "Invalid coordinate";
}

int main() {

  float coordinates[2];
  printf("Enter x and y coordinates:");
  scanf("%f %f", &coordinates[0], &coordinates[1]);
  const char *quadrant = findQuadrant(coordinates[0], coordinates[1]);

  printf("Point (%f, %f) is located on the %s", coordinates[0], coordinates[1],
         quadrant);
  return 0;
}
==============================================
PGM #3 Output
-----------------------------------------------------------------------

Enter x and y coordinates:0 0
Point (0.000000, 0.000000) is located on the located on the origin

Enter x and y coordinates:-15 1
Point (-15.000000, 1.000000) is located on the located in Quadrant II

Enter x and y coordinates:1 -8 
Point (1.000000, -8.000000) is located on the located in Quadrant IV

Enter x and y coordinates:0 15
Point (0.000000, 15.000000) is located on the located on the y-axis

Enter x and y coordinates:1 0
Point (0.000000, 15.000000) is located on the located on the x-axis

==============================================
