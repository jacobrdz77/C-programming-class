=======================================================================
Jacob Rodriguez
COSC1420 910
PSET: 12  
=======================================================================
complex.h
#ifndef COMPLEX_H
#define COMPLEX_H

#include <stdio.h>

typedef struct {
  double real;
  double imaginary;
} Complex;

Complex getComplex(FILE *fp);
void writeComplex(const Complex *const this, FILE *fp);
Complex Add(const Complex *const p, const Complex *const q);
Complex Multiply(const Complex *const p, const Complex *const q);
void Copy(Complex *const this, const Complex *const value);

#endif

complex.c
#include <stdio.h>
#include <stdlib.h>

#include "complex.h"
Complex getComplex(FILE *fp) {
  Complex c;

  fscanf(fp, "%lf%lfi", &c.real, &c.imaginary);

  return c;
}

// writes a complex number to a file pointer, including stdout
void writeComplex(const Complex *const this, FILE *fp) {
  if (this->real == 0 && this->imaginary == 0) {
    fprintf(fp, "%.2lf\n", this->real);
    return;
  }
  if (this->real == 0) {
    fprintf(fp, "%.2lfi\n", this->imaginary);
    return;
  }
  if (this->imaginary == 0) {
    fprintf(fp, "%.2lf\n", this->real);
    return;
  }

  if (this->imaginary >= 0) {
    fprintf(fp, "%.2lf+%.2lfi\n", this->real, this->imaginary);
  } else {
    fprintf(fp, "%.2lf%.2lfi\n", this->real, this->imaginary);
  }
}

// adds two complex numbers
Complex Add(const Complex *const p, const Complex *const q) {

  Complex result;
  result.real = p->real + q->real;
  result.imaginary = p->imaginary + q->imaginary;
  return result;
}

// multiplies two complex numbers
Complex Multiply(const Complex *const p, const Complex *const q) {
  Complex result;
  result.real = p->real * q->real - p->imaginary * p->imaginary;
  result.imaginary = p->real * q->imaginary - p->imaginary * q->real;
  return result;
}

// copies value into this
void Copy(Complex *const this, const Complex *const value) {
  this->imaginary = value->imaginary;
  this->real = value->real;
}

main.c
#include "complex.h"
#include <stdio.h>

int main() {

  Complex ca[] = {
      {.real = 0, .imaginary = 0},   {.real = 1, .imaginary = 0},
      {.real = -1, .imaginary = 0},  {.real = 0, .imaginary = 3},
      {.real = 0, .imaginary = -4},  {.real = 2, .imaginary = 3},
      {.real = 2, .imaginary = -4},  {.real = -5, .imaginary = 3},
      {.real = -5, .imaginary = -4},
  };

  int length = sizeof(ca) / sizeof(ca[0]);

  for (int i = 0; i < length; i++) {
    printf("ca[%d]=", i);
    writeComplex(&ca[i], stdout);
  }

  Complex c1, c2;
  printf("Enter complex # in the form A+-Bi:");
  c1 = getComplex(stdin);
  printf("Enter complex # in the form A+-Bi:");
  c2 = getComplex(stdin);

  printf("1st Complex:");
  writeComplex(&c1, stdout);
  printf("2st Complex:");
  writeComplex(&c2, stdout);

  Complex addResult;
  addResult = Add(&c1, &c2);
  printf("\tAddition:");
  writeComplex(&addResult, stdout);

  Complex multResult;
  printf("\tMultiplication:");
  multResult = Multiply(&c1, &c2);
  writeComplex(&multResult, stdout);

  printf("Copying...\n");
  Copy(&c1, &c2);

  printf("1st Complex:");
  writeComplex(&c1, stdout);
  printf("2st Complex:");
  writeComplex(&c2, stdout);

  return 0;
}
-----------------------------------------------------------------------

ca[0]=0.00
ca[1]=1.00
ca[2]=-1.00
ca[3]=3.00i
ca[4]=-4.00i
ca[5]=2.00+3.00i
ca[6]=2.00-4.00i
ca[7]=-5.00+3.00i
ca[8]=-5.00-4.00i
Enter complex # in the form A+-Bi:3+2i
Enter complex # in the form A+-Bi:6+7i
1st Complex:3.00+2.00i
2st Complex:6.00+7.00i
        Addition:9.00+9.00i
        Multiplication:14.00+9.00i
Copying...
1st Complex:6.00+7.00i
2st Complex:6.00+7.00i

==============================================
PGM #2 Source Code #2
#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[]) {
  char finalString[1000] = "";
  for (int i = 0; i < argc; i++) {
    printf("arg %02d :: %s\n", i, argv[i]);
    strcat(finalString, argv[i]);
  }
  printf("combined: %s\n", finalString);
  return 0;
}
-----------------------------------------------------------------------

$ .\pgm-2 a b c d e f g
arg 00 :: C:\Users\Jacob\dev\C-Class\pset-12\pgm-2.exe
arg 01 :: a
arg 02 :: b
arg 03 :: c
arg 04 :: d
arg 05 :: e
arg 06 :: f
arg 07 :: g
combined: C:\Users\Jacob\dev\C-Class\pset-12\pgm-2.exeabcdefg

==============================================
PGM #3 Source Code
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define PRINT_ARRAY(arr, size)                                                 \
  do {                                                                         \
    printf("array: ");                                                         \
    for (int i = 0; i < size; i++) {                                           \
      printf("%d ", arr[i]);                                                   \
    }                                                                          \
    printf("\n");                                                              \
  } while (0)

#define PRINT_MAX(arr, size)                                                   \
  do {                                                                         \
    int max = arr[0];                                                          \
    for (int i = 1; i < size; i++) {                                           \
      if (arr[i] > max) {                                                      \
        max = arr[i];                                                          \
      }                                                                        \
    }                                                                          \
    printf("max: %d\n", max);                                                  \
  } while (0)

#define PRINT_AVG(arr, size)                                                   \
  do {                                                                         \
    int sum = 0;                                                               \
    for (int i = 0; i < size; i++) {                                           \
      sum += arr[i];                                                           \
    }                                                                          \
    printf("avg: %.2f\n", (float)sum / size);                                  \
  } while (0)

int main() {
  srand(time(NULL));

  int nums[20];
  for (int i = 0; i < 20; i++) {
    int randomNumber = (rand() % 1000);
    nums[i] = randomNumber;
  }

  PRINT_ARRAY(nums, 20);
  PRINT_MAX(nums, 20);
  PRINT_AVG(nums, 20);

  return 0;
}
-----------------------------------------------------------------------

array: 555 608 138 48 734 289 111 818 563 743 634 978 180 464 626 606 208 634 329 926
max: 978
avg: 509.60

==============================================